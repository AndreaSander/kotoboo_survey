select(response_id, country) %>%
group_by(country) %>%
summarize(n = n()) %>%
ungroup() %>%
mutate(total_n = sum(n),
n_percent = round(n/total_n * 100, 1)) %>%
arrange(desc(n_percent))
#I will make a png map with this info
data_feature <- x_2022_september_qualtrics_data %>%
## select relevant variables
select(response_id, starts_with("importance_"), -starts_with("importance_other")) %>%
## transpose data frame
pivot_longer(-response_id, names_to = "feature", values_to = "rating") %>%
mutate(feature = as.factor(feature),
rating = as.numeric(rating)) %>%
## recode feature levels
mutate(feature = recode(feature,
"importance_concrete_advice" = "Concrete advice",
"importance_free" = "Free",
"importance_easy_to_access" = "Easy to access",
"importance_understandable" = "Understandable",
"importance_engaging" = "Engaging",
"importance_EDI" = "Diverse and inclusive",
"importance_social_media" = "Linked to social media",
"importance_reliable" = "Reliable",
"importance_evidence_based" = "Evidence-based",
"importance_unpretentious" = "Unpretentious",
"importance_respectful" = "Respectful",
"importance_fun" = "Fun",
"importance_unbiased" = "Unbiased"))
# calculate mean rating per features
mean_feature_rating <- data_feature %>%
filter(!is.na(rating)) %>%
## calculate mean rating per feature
group_by(feature) %>%
summarize(n = n(),
mean_rating = mean(rating, na.rm=T)) %>%
arrange(mean_rating) %>% # sort by ascending order as the smaller value indicates greater importance
ungroup()
#crank::meanranks(data_feature %>%
#                   pivot_wider(id_cols = response_id, names_from = feature, values_from = rating) %>%
#                   select(-response_id))
plot_mean_feature_rating <- mean_feature_rating %>%
ggplot(aes(x = reorder(feature, -mean_rating), y = mean_rating)) +
geom_point(size = 5) +
theme_minimal() +
scale_y_continuous(limits = c(1, 14), breaks = seq(1, 14, by = 1)) +
labs(x = "Feature",
y = "Importance rating averaged across participants") +
coord_flip() +
annotate("text", x=1, y=2, label="most important ←", color="red") +
annotate("text", x=1, y=13, label="→ least important", color ="red")
# visualize all variables by number of participants voted per feature
plot_feature_all <- data_feature %>%
count(rating, feature) %>% # count combos of rating & feature
ggplot(aes(x = rating, y = n, fill = factor(feature, levels = as.vector(mean_feature_rating$feature)))) +
geom_col(position = "fill") +
theme_minimal() +
scale_x_continuous(breaks=seq(1, 14, 1)) +
scale_fill_manual(values = c("#a50026", "#e31a1c", "#fb9a99", "#ff7f00", "#fdbf6f",
"#ffed6f", "#b2df8a", "#33a02c", "#02818a",
"#a6cee3", "#1f78b4", "#cab2d6", "#6a3d9a")) +
labs(x = "Rating (with 1 being the most important)",
y = "Proportion of participants",
fill = "Feature")
plot_feature_per_feature <- data_feature %>%
count(rating, feature) %>%
group_by(rating) %>%
mutate(rating = as.factor(rating),
#sum = sum(n),
prop = n/161) %>%
ungroup() %>%
#mutate(feature = match(as.vector(mean_feature_rating$feature), feature)) %>%
#filter(!is.na(rating)) %>%
ggplot(aes(x = fct_rev(factor(feature, levels = as.vector(mean_feature_rating$feature))),
y = prop,
fill = rating)) +
geom_bar(position="stack", stat="identity") +
theme_minimal() +
scale_fill_manual(values = c("#a50026", "#e31a1c", "#fb9a99", "#ff7f00", "#fdbf6f",
"#ffed6f", "#ffff99", "#b2df8a", "#33a02c", "#02818a",
"#a6cee3", "#1f78b4", "#cab2d6", "#6a3d9a",  "#999999")) +
coord_flip() +
labs(x = "Feature",
y = "Proportion of participants",
fill = "Importance rating")
plot_mean_feature_rating <- mean_feature_rating %>%
ggplot(aes(x = reorder(feature, -mean_rating), y = mean_rating)) +
geom_point(size = 5) +
theme_minimal() +
scale_y_continuous(limits = c(1, 14), breaks = seq(1, 14, by = 1)) +
labs(x = "Feature",
y = "Importance rating averaged across participants") +
coord_flip() +
annotate("text", x=1, y=2, label="most important ←", color="red") +
annotate("text", x=1, y=13, label="→ least important", color ="red")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(broom)
library(janitor)
library(readxl)
library(stringr)
library(lme4)
library(lmerTest)
library(ggplot2)
#library(tidylog)
#function for finding mode
find_mode <- function(x) {
u <- unique(x)
tab <- tabulate(match(x, u))
u[tab == max(tab)]
}
x_2022_september_qualtrics_data <- read_excel("2022_september_qualtrics_data.xlsx", col_names=c("start_date", "end_date", "response_type", "progress", "duration_s", "finished", "recorded_date", "response_id","distribution_channel", "user_language", "recaptcha_score","consent", "year_birth", "gender","country", "not_caregiver", "is_parent","is_teacher","is_grandparent", "is_babysitter","is_aunt_uncle","is_sibling","is_therapist", "is_neighbour","is_family_friend", "is_other","visit_kotoboo", "how_helpful_evidence_based", "how_often_internet","which_topics_bilingualism","which_topics_screen_time","which_topics_lang_diversity","which_topics_sign_langauge","which_topics_foster_language","which_topics_reading_writing","which_topics_langauge_dev_disorders","which_topics_mythbusters","importance_concrete_advice", "importance_free","importance_easy_to_access", "importance_understandable", "importance_engaging","importance_EDI", "importance_social_media", "importance_reliable","importance_evidence_based", "importance_unpretentious", "importance_respectful","importance_fun", "importance_unbiased", "importance_other","importance_other_text", "participate_in_science", "comic_ideas", "comic_ideas_text", "sc0_score", "language", "q_language"))
x_2022_september_qualtrics_data<- x_2022_september_qualtrics_data [-c(1,2,3,4),]
#203 (n of pre-exclusion)
x_2022_september_qualtrics_data <- x_2022_september_qualtrics_data %>%
filter(recaptcha_score >=.80) %>% #200 3 excluded
filter(year_birth <=2004) %>% #161 39 excluded
filter(year_birth >=1922) %>% #161 0 excluded
filter(consent=="I consent")%>% #161 0 excluded
filter(is_parent=="Parent") #127 34 excluded
#range(as.numeric(x_2022_september_qualtrics_data$progress)) #50-100 completed
# further exclude based on the completion rate (i.e., no response from Q5 onwards)
## first, check completion per question
x_2022_september_qualtrics_data <- x_2022_september_qualtrics_data %>%
# check if there's any response (flag NA = 0)
mutate(completed_Q1 = ifelse(is.na(year_birth), 0, 1),
completed_Q2 = ifelse(is.na(gender), 0, 1),
completed_Q3 = ifelse(is.na(country), 0, 1),
completed_Q4 = case_when(if_all(c(starts_with("is_"), not_caregiver), is.na) ~ 0,
TRUE ~ 1),
flag_Q5 = ifelse(is.na(visit_kotoboo), 0, 1),
flag_Q6 = ifelse(is.na(how_helpful_evidence_based), 0, 1),
flag_Q7 = ifelse(is.na(how_often_internet), 0, 1),
flag_Q8 = case_when(if_all(starts_with("which_topics"), is.na) ~ 0,
TRUE ~ 1),
flag_Q9 = case_when(if_all(starts_with("importance_"), is.na) ~ 0,
TRUE ~ 1),
flag_Q10 = ifelse(is.na(participate_in_science), 0, 1),
flag_Q11 = ifelse(is.na(comic_ideas), 0, 1)) %>%
# create a new variable indicating no response from Q5 onward
mutate(no_response = case_when(if_all(starts_with("flag_"), ~ . == 0) ~ 1,
TRUE ~ 0))
## identify response_id with no responses from Q5 onward
exclusion_completion <- x_2022_september_qualtrics_data %>%
filter(no_response == 1) %>%
distinct(response_id)
## remove those response_id from the data
x_2022_september_qualtrics_data <- x_2022_september_qualtrics_data %>%
anti_join(exclusion_completion) # 1 more excluded
country_table <- x_2022_september_qualtrics_data %>%
select(response_id, country) %>%
group_by(country) %>%
summarize(n = n()) %>%
ungroup() %>%
mutate(total_n = sum(n),
n_percent = round(n/total_n * 100, 1)) %>%
arrange(desc(n_percent))
#I will make a png map with this info
View(country_table)
#Age range
x_2022_september_qualtrics_data <- x_2022_september_qualtrics_data %>%
mutate(survey_year = 2022) %>%
mutate(age = survey_year - as.numeric(year_birth))
range(x_2022_september_qualtrics_data$age) #19-63 years
mean(x_2022_september_qualtrics_data$age) #36.08 years
sd(x_2022_september_qualtrics_data$age) #5.92
sum(x_2022_september_qualtrics_data$gender=="Female", na.rm = T) #100 female
sum(x_2022_september_qualtrics_data$gender=="Male", na.rm = T)  # 23 male
sum(x_2022_september_qualtrics_data$gender=="Prefer not to answer", na.rm = T) #3
#NA = 1
mean(as.numeric(x_2022_september_qualtrics_data$duration_s)) # 15522.56
median(as.numeric(x_2022_september_qualtrics_data$duration_s))#237
table(x_2022_september_qualtrics_data$duration_s)
# to minutes
median(as.numeric(x_2022_september_qualtrics_data$duration_s))/60 #3.95
range(as.numeric(x_2022_september_qualtrics_data$rate_completed)) #45-100% completed
# calculate completion rate per participant
x_2022_september_qualtrics_data <- x_2022_september_qualtrics_data %>%
mutate(sum_q_completed = rowSums(across(starts_with(c("completed_", "flag_"))), na.rm = TRUE),
rate_completed = round(sum_q_completed / 11 * 100, 2)) %>%
select(-starts_with(c("completed_", "flag_"))) #remove unnecessary variables
# mean, range, sd of completion rate
mean(as.numeric(x_2022_september_qualtrics_data$rate_completed)) # mean of 94.58% completion
range(as.numeric(x_2022_september_qualtrics_data$rate_completed)) #45-100% completed
sd(as.numeric(x_2022_september_qualtrics_data$rate_completed)) # sd of 12.76%
#average_pop <- x_2022_september_qualtrics_data %>%
#  select(progress) #%>%
#  #filter(progress!="100")
##average progress
#mean(as.numeric(average_pop$progress))
#sd(as.numeric(average_pop$progress))
#range(as.numeric(average_pop$progress))
#table(average_pop$progress)
visits<- x_2022_september_qualtrics_data %>%
select(visit_kotoboo)
visits_table<- as.data.frame(table(visits$visit_kotoboo))
visits_table<- visits_table %>%
mutate(percentage = Freq/nrow(x_2022_september_qualtrics_data)*100) %>%
arrange(desc(percentage))
visits_table
count_internet <- x_2022_september_qualtrics_data %>%
group_by(how_often_internet) %>%
count(how_often_internet)
count_internet
# mode
find_mode(x_2022_september_qualtrics_data$how_often_internet)
# mean
internet_freq <- x_2022_september_qualtrics_data %>%
mutate(internet_freq_numeric = case_when(
str_detect(how_often_internet, "Never") ~ 1,
str_detect(how_often_internet, "Rarely") ~ 2,
str_detect(how_often_internet, "Occasionally") ~ 3,
str_detect(how_often_internet, "Often") ~ 4,
str_detect(how_often_internet, "Frequently") ~ 5,
TRUE ~ NA_real_))
mean(internet_freq$internet_freq_numeric, na.rm=T)
# plot (n = 143)
plot_internet_freq <- count_internet %>%
# calculate percent
mutate(n_internet = nrow(x_2022_september_qualtrics_data) - count_internet$n[is.na(count_internet$how_often_internet)],
Proportion = n/n_internet) %>%
# remove NAs
filter(!is.na(how_often_internet)) %>%
# rename items
mutate(how_often_internet = case_when(
str_detect(how_often_internet, "Never") ~ "Never",
str_detect(how_often_internet, "Rarely") ~ "Rarely (a few times a year)",
str_detect(how_often_internet, "Occasionally") ~ "Occasionally (once a month)",
str_detect(how_often_internet, "Often") ~ "Often (every other week)",
str_detect(how_often_internet, "Frequently") ~ "Frequently (more than one a week)")) %>%
ggplot() +
geom_bar(aes(x = factor(0), y = Proportion,
fill = factor(how_often_internet,
levels = c("Frequently (more than one a week)", "Often (every other week)", "Occasionally (once a month)", "Rarely (a few times a year)", "Never"))),
position="stack", stat="identity") +
coord_flip() +
scale_fill_manual(values = c("#e31a1c", "#fb9a99", "#d9d9d9", "#6baed6", "#3182bd")) +
theme_minimal(base_size = 20) +
theme(legend.position="bottom",
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
guides(fill=guide_legend(title="Frequency", reverse = TRUE, nrow = 2))
plot_internet_freq
ggsave("plot_internet_freq.jpg", plot_internet_freq,
width = 12,
height = 4)
count_helpfulness <- x_2022_september_qualtrics_data %>%
group_by(how_helpful_evidence_based) %>%
count(how_helpful_evidence_based)%>%
mutate(percentage = (n/nrow()*100)) %>%
arrange(desc(percentage))
count_helpfulness <- x_2022_september_qualtrics_data %>%
group_by(how_helpful_evidence_based) %>%
count(how_helpful_evidence_based)%>%
mutate(percentage = (n/126)*100) %>%
arrange(desc(percentage))
count_helpfulness
# mode
find_mode(x_2022_september_qualtrics_data$how_helpful_evidence_based)
# mean
helpfulness <- x_2022_september_qualtrics_data %>%
mutate(helpfulness_numeric = case_when(
str_detect(how_helpful_evidence_based, "Not at all") ~ 1,
str_detect(how_helpful_evidence_based, "Somewhat") ~ 2,
str_detect(how_helpful_evidence_based, "Very helpful") ~ 3,
TRUE ~ NA_real_))
mean(helpfulness$helpfulness_numeric, na.rm=T)
# plot (n = 145)
plot_helpfulness <- count_helpfulness %>%
# calculate percent
mutate(n_helpfulness = nrow(x_2022_september_qualtrics_data) - count_helpfulness$n[is.na(count_helpfulness$how_helpful_evidence_based)],
Proportion = n/n_helpfulness) %>%
# remove NAs
filter(!is.na(how_helpful_evidence_based)) %>%
# rename items
mutate(how_helpful_evidence_based = case_when(
str_detect(how_helpful_evidence_based, "Not at all") ~ "Not at all helpful",
str_detect(how_helpful_evidence_based, "Somewhat") ~ "Somewhat helpful",
str_detect(how_helpful_evidence_based, "Very helpful") ~ "Very helpful")) %>%
ggplot() +
geom_bar(aes(x = factor(0), y = Proportion,
fill = factor(how_helpful_evidence_based,
levels = c("Very helpful", "Somewhat helpful", "Not at all helpful"))),
position="stack", stat="identity") +
coord_flip() +
scale_fill_manual(values = c("#e31a1c", "#d9d9d9", "#3182bd")) +
theme_minimal(base_size = 20) +
theme(legend.position="bottom",
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
guides(fill=guide_legend(title="Helpfulness", reverse = TRUE))
plot_helpfulness
ggsave("plot_helpfulness.jpg", plot_helpfulness,
width = 12,
height = 4)
count_internet <- x_2022_september_qualtrics_data %>%
group_by(how_often_internet) %>%
count(how_often_internet) %>%
mutate(percentage = (n/126)*100) %>%
arrange(desc(percentage))
count_internet
15.8+28.5
44.3+17.4
# mode
find_mode(x_2022_september_qualtrics_data$how_often_internet)
# mode
find_mode(x_2022_september_qualtrics_data$how_helpful_evidence_based)
count_helpfulness <- x_2022_september_qualtrics_data %>%
group_by(how_helpful_evidence_based) %>%
count(how_helpful_evidence_based)%>%
mutate(percentage = (n/126)*100) %>%
arrange(desc(percentage))
count_helpfulness
# mode
find_mode(x_2022_september_qualtrics_data$how_helpful_evidence_based)
# mean
helpfulness <- x_2022_september_qualtrics_data %>%
mutate(helpfulness_numeric = case_when(
str_detect(how_helpful_evidence_based, "Not at all") ~ 1,
str_detect(how_helpful_evidence_based, "Somewhat") ~ 2,
str_detect(how_helpful_evidence_based, "Very helpful") ~ 3,
TRUE ~ NA_real_))
mean(helpfulness$helpfulness_numeric, na.rm=T)
# plot (n = 145)
plot_helpfulness <- count_helpfulness %>%
# calculate percent
mutate(n_helpfulness = nrow(x_2022_september_qualtrics_data) - count_helpfulness$n[is.na(count_helpfulness$how_helpful_evidence_based)],
Proportion = n/n_helpfulness) %>%
# remove NAs
filter(!is.na(how_helpful_evidence_based)) %>%
# rename items
mutate(how_helpful_evidence_based = case_when(
str_detect(how_helpful_evidence_based, "Not at all") ~ "Not at all helpful",
str_detect(how_helpful_evidence_based, "Somewhat") ~ "Somewhat helpful",
str_detect(how_helpful_evidence_based, "Very helpful") ~ "Very helpful")) %>%
ggplot() +
geom_bar(aes(x = factor(0), y = Proportion,
fill = factor(how_helpful_evidence_based,
levels = c("Very helpful", "Somewhat helpful", "Not at all helpful"))),
position="stack", stat="identity") +
coord_flip() +
scale_fill_manual(values = c("#e31a1c", "#d9d9d9", "#3182bd")) +
theme_minimal(base_size = 20) +
theme(legend.position="bottom",
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
guides(fill=guide_legend(title="Helpfulness", reverse = TRUE))
plot_helpfulness
ggsave("plot_helpfulness.jpg", plot_helpfulness,
width = 12,
height = 4)
count_internet <- x_2022_september_qualtrics_data %>%
group_by(how_often_internet) %>%
count(how_often_internet) %>%
mutate(percentage = (n/126)*100) %>%
arrange(desc(percentage))
count_internet
# mode
find_mode(x_2022_september_qualtrics_data$how_often_internet)
# mean
internet_freq <- x_2022_september_qualtrics_data %>%
mutate(internet_freq_numeric = case_when(
str_detect(how_often_internet, "Never") ~ 1,
str_detect(how_often_internet, "Rarely") ~ 2,
str_detect(how_often_internet, "Occasionally") ~ 3,
str_detect(how_often_internet, "Often") ~ 4,
str_detect(how_often_internet, "Frequently") ~ 5,
TRUE ~ NA_real_))
mean(internet_freq$internet_freq_numeric, na.rm=T)
# plot (n = 143)
plot_internet_freq <- count_internet %>%
# calculate percent
mutate(n_internet = nrow(x_2022_september_qualtrics_data) - count_internet$n[is.na(count_internet$how_often_internet)],
Proportion = n/n_internet) %>%
# remove NAs
filter(!is.na(how_often_internet)) %>%
# rename items
mutate(how_often_internet = case_when(
str_detect(how_often_internet, "Never") ~ "Never",
str_detect(how_often_internet, "Rarely") ~ "Rarely (a few times a year)",
str_detect(how_often_internet, "Occasionally") ~ "Occasionally (once a month)",
str_detect(how_often_internet, "Often") ~ "Often (every other week)",
str_detect(how_often_internet, "Frequently") ~ "Frequently (more than one a week)")) %>%
ggplot() +
geom_bar(aes(x = factor(0), y = Proportion,
fill = factor(how_often_internet,
levels = c("Frequently (more than one a week)", "Often (every other week)", "Occasionally (once a month)", "Rarely (a few times a year)", "Never"))),
position="stack", stat="identity") +
coord_flip() +
scale_fill_manual(values = c("#e31a1c", "#fb9a99", "#d9d9d9", "#6baed6", "#3182bd")) +
theme_minimal(base_size = 20) +
theme(legend.position="bottom",
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
guides(fill=guide_legend(title="Frequency", reverse = TRUE, nrow = 2))
plot_internet_freq
ggsave("plot_internet_freq.jpg", plot_internet_freq,
width = 12,
height = 4)
by_topic <- x_2022_september_qualtrics_data %>%
select(starts_with("which_topics")) %>%
rename_all(~stringr::str_replace(.,"which_topics_","")) %>%
mutate_all(funs(replace(., !is.na(.), 1))) %>%
mutate_all(funs(as.numeric))
# number of topics selected per participant
n_topics_per_participants <- by_topic %>%
rowwise() %>%
mutate(sum = sum(c_across(where(is.numeric)), na.rm = T))
mean(n_topics_per_participants$sum)
sd(n_topics_per_participants$sum)
range(n_topics_per_participants$sum)
# boxplot showing number of choices
plot_n_topics_interested <- ggplot(n_topics_per_participants, aes(x=factor(0), y=sum))+
geom_boxplot() +
scale_y_continuous(breaks = seq(0, 8, by = 1)) +
geom_jitter(width = 0.25, height = 0.25, alpha = 0.5) +
#geom_point(aes(y=sum), color="black") +
#geom_dotplot(binaxis='y', stackdir='center', dotsize = 0.4, alpha = 0.65)+
theme_minimal(base_size = 20) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(y = "Number of topics selected")
ggsave("plot_n_topics_interested.jpg", plot_n_topics_interested,
width = 6,
height = 8)
# violin plot showing number of choices (with mean being set as the reference point)
plot_n_topics_interested_violin <- n_topics_per_participants %>%
ggplot(aes(x=factor(0), y=sum)) +
geom_violin() +
#geom_boxplot(width=0.3, color = "blue") +
geom_jitter(shape=19, position=position_jitter(width=0.25,height=0.25), alpha = 0.5) +
#geom_jitter(width = 0.25, height = 0.1, alpha = 0.5) +
#geom_dotplot(binaxis='y', stackdir='center', dotsize=0.35, alpha = 0.25) +
stat_summary(fun = "mean",
geom = "crossbar",
#width = 0.5,
colour = "red",
) +
#stat_summary(fun = "median",
#             geom = "crossbar",
#             color = "blue",
#             linetype = "dashed") +
scale_y_continuous(breaks = seq(0, 8, by = 1)) +
theme_minimal(base_size = 20) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(y = "Number of topics selected")
ggsave("plot_n_topics_interested_violin.jpg", plot_n_topics_interested_violin,
width = 5,
height = 8)
# frequency of topics
topic_sums <- as.data.frame(colSums(by_topic, na.rm=T)) %>%
arrange(desc(colSums(by_topic, na.rm = T)))
# plot frequency of topics
plot_topic <- by_topic %>%
pivot_longer(everything(), names_to = "topic", values_to = "selected") %>%
na.omit() %>%
group_by(topic) %>%
count() %>%
mutate(topic = recode(topic,
bilingualism = "Language learning in bilingual environments",
screen_time = "The effect of screen time on language learning",
lang_diversity = "Language diversity around the world",
sign_language = "Learning sign language",
foster_language = "Ways to foster language learning",
reading_writing = "Ways to foster reading and writing",
langauge_dev_disorders = "Ways to foster language learning in \n children with developmental disorders",
mythbuster = "Debunking common language learning myths")) %>%
ggplot(aes(x = reorder(topic, n), y = n)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = seq(0, 100, by = 10)) +
theme_minimal(base_size = 20) +
coord_flip() +
labs(x = "Topic",
y = "Number of counts")
plot_topic
ggsave("plot_topic.jpg", plot_topic,
width = 12,
height = 8)
#by_topic <- x_2022_september_qualtrics_data %>%
#  select(c(which_topics_bilingualism, which_topics_screen_time, which_topics_lang_diversity, which_topics_sign_langauge, which_topics_foster_language, which_topics_reading_writing, which_topics_langauge_dev_disorders, which_topics_mythbusters))%>%
#  replace_na(list (which_topics_bilingualism = "0")) %>%
#  replace_na(list (which_topics_screen_time = "0")) %>%
#  replace_na(list (which_topics_lang_diversity = "0")) %>%
#  replace_na(list (which_topics_sign_langauge = "0")) %>%
#  replace_na(list (which_topics_foster_language ="0")) %>%
#  replace_na(list (which_topics_reading_writing = "0")) %>%
#  replace_na(list(which_topics_langauge_dev_disorders ="0")) %>%
#  replace_na(list(which_topics_mythbusters ="0")) %>%
#  mutate(which_topics_bilingualism = case_when( which_topics_bilingualism=="0" ~ 0,
#                                              TRUE ~1)) %>%
#    mutate(which_topics_screen_time = case_when( which_topics_screen_time=="0" ~ 0,
#                                              TRUE ~1)) %>%
#      mutate(which_topics_lang_diversity = case_when( which_topics_lang_diversity=="0" ~ 0,
#                                              TRUE ~1)) %>%
#      mutate(which_topics_sign_langauge = case_when( which_topics_sign_langauge =="0" ~ 0,
#                                              TRUE ~1)) %>%
#      mutate(which_topics_foster_language = case_when(which_topics_foster_language=="0" ~ 0,
#                                              TRUE ~1)) %>%
#      mutate(which_topics_reading_writing = case_when( which_topics_reading_writing=="0" ~ 0,
#                                              TRUE ~1)) %>%
#      mutate(which_topics_langauge_dev_disorders= case_when( which_topics_langauge_dev_disorders=="0" ~ 0,
#                                              TRUE ~1)) %>%
#      mutate(which_topics_mythbusters = case_when( which_topics_mythbusters=="0" ~ 0,
#                                              TRUE ~1))
